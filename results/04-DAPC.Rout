
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(poppr)
Loading required package: adegenet
Loading required package: ade4

   /// adegenet 2.1.1 is loaded ////////////

   > overview: '?adegenet'
   > tutorials/doc/questions: 'adegenetWeb()' 
   > bug reports/feature requests: adegenetIssues()


This is poppr version 2.6.1. To get started, type package?poppr
OMP parallel support: available
> library(ggcompoplot)
> library(ggplot2)
> enc <- getOption("encoding")
> options(encoding = "iso-8859-1")
> CD <- readRDS(here::here("data", "full-genclone-object.rds"))
> 
> if (interactive()){
+   set.seed(2017-12-14)
+   CDXVAL <- xvalDapc(
+     tab(CD, NA.method = "mean"),
+     grp = pop(CD),
+     n.pca.max = 30,
+     n.rep = 500,
+     n.pc = seq.int(15)
+   )
+ }
> 
> CD_DAPC <- dapc(CD, n.pca = 7L, n.da = 4L)
> CD_DAPC
	#################################################
	# Discriminant Analysis of Principal Components #
	#################################################
class: dapc
$call: dapc.genind(x = CD, n.pca = 7L, n.da = 4L)

$n.pca: 7 first PCs of PCA used
$n.da: 4 discriminant functions saved
$var (proportion of conserved variance): 0.661

$eig (eigenvalues): 26.42 10 3.744 1.912 1.646 ...

  vector    length content                   
1 $eig      7      eigenvalues               
2 $grp      94     prior group assignment    
3 $prior    8      prior group probabilities 
4 $assign   94     posterior group assignment
5 $pca.cent 66     centring vector of PCA    
6 $pca.norm 66     scaling vector of PCA     
7 $pca.eig  55     eigenvalues of PCA        

  data.frame    nrow ncol content                                          
1 $tab          94   7    retained PCs of PCA                              
2 $means        8    7    group means                                      
3 $loadings     7    4    loadings of variables                            
4 $ind.coord    94   4    coordinates of individuals (principal components)
5 $grp.coord    8    4    coordinates of groups                            
6 $posterior    94   8    posterior membership probabilities               
7 $pca.loadings 66   7    PCA loadings of original variables               
8 $var.contr    66   4    contribution of original variables               

> pdf(here::here("figs/DAPC-scatterplot.pdf"), width = 3.464565, height = 3.464565 * (1/1.2), pointsize = 5, colormodel = "cmyk")
> dev.control("enable")
> scatter.dapc(
+   CD_DAPC,
+   pch = 19,
+   cex = 1.0,
+   clabel = 0,
+   cstar = 0,
+   cellipse = 1,
+   legend = TRUE,
+   inset.da = 0,
+   posi.da = "bottomleft",
+   posi.leg = "topleft",
+   col = other(CD)$palette[popNames(CD)])
> dev.copy(device = tiff, here::here("figs/DAPC-scatterplot.tiff"), width = 3.464565, height = 3.464565 * (1/1.2), pointsize = 5, units = "in", res = 1200)
quartz_off_screen 
                3 
> dev.off()
pdf 
  2 
> dev.off()
null device 
          1 
> 
> # ANTHONY
> 
> pdf(here::here("figs/DAPC-barplot.pdf"), width = 7.20472, height = 3.464565, pointsize = 5, colormodel = "cmyk")
> dev.control("enable")
> gg <- ggcompoplot(CD_DAPC, CD, cols = 4, pal = other(CD)$palette)
> gg$data$population <- factor(gg$data$population, names(other(CD)$palette))
> gg$data$oldPopulation <- factor(gg$data$oldPopulation, names(other(CD)$palette))
> gg + 
+   theme_bw(base_size = 10, base_family = "Helvetica") +
+   theme(axis.text.x = element_blank()) +
+   theme(axis.ticks.x = element_blank()) +
+   theme(legend.position = "top") 
> dev.copy(device = tiff, here::here("figs/DAPC-barplot.tiff"), width = 7.20472, height = 3.464565, pointsize = 5, units = "in", res = 1200)
quartz_off_screen 
                3 
> dev.off()
pdf 
  2 
> dev.off()
null device 
          1 
> options(encoding = enc)
> getOption("encoding")
[1] "native.enc"
> 
