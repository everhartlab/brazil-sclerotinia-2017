
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # setwd("~/Thesis Project/Data Analysis")
> library(poppr)
Loading required package: adegenet
Loading required package: ade4

   /// adegenet 2.1.0 is loaded ////////////

   > overview: '?adegenet'
   > tutorials/doc/questions: 'adegenetWeb()' 
   > bug reports/feature requests: adegenetIssues()


This is poppr version 2.6.0. To get started, type package?poppr
OMP parallel support: available
> library(ggcompoplot)
> library(ggplot2)
> enc <- getOption("encoding")
> options(encoding = "iso-8859-1")
> CD <- read.genalex(here::here("data", "data.csv")) #"~/Thesis Project/Data Analysis/Raw Data/Compiled Data AN 2.csv")
> splitStrata(CD) <- ~Continent/Country/Population
> setPop(CD) <- ~Population
> my_palette <- c("Nebraska" = "#000000",
+                 "Argentina" = "#F0E442", # "#E69F00",
+                 "Bahia" = "#56B4E9",
+                 "Góias" = "#009E73",
+                 "Mato Grosso do Sul" = "#E69F00",
+                 "Minas Gerias" = "#0072B2",
+                 "Paraná" = "#D55E00",
+                 "Rio Grande do Sul" = "#CC79A7")
> 
> # ANTHONY
> # 
> # Anthony, please modify this so that:
> #  - you can show why you chose 20 PCs ( use xvalDapc )
> #  - show the scree plot for the discriminant axes ( this is an important diagnostic )
> #  - the colors on the plot are correct ( hint: use the output of popNames(CD) to subset my_pallette )
> #  - All the points show up in the plot.
> if (interactive()){
+   set.seed(2017-12-14)
+   CDXVAL <- xvalDapc(
+     tab(CD, NA.method = "mean"),
+     grp = pop(CD),
+     n.pca.max = 30,
+     n.rep = 500,
+     n.pc = seq.int(15)
+   )
+ }
> 
> CD_DAPC <- dapc(CD, n.pca = 7L, n.da = 4L)
> CD_DAPC
	#################################################
	# Discriminant Analysis of Principal Components #
	#################################################
class: dapc
$call: dapc.genind(x = CD, n.pca = 7L, n.da = 4L)

$n.pca: 7 first PCs of PCA used
$n.da: 4 discriminant functions saved
$var (proportion of conserved variance): 0.662

$eig (eigenvalues): 26.81 10.1 3.712 2.306 1.66 ...

  vector    length content                   
1 $eig      7      eigenvalues               
2 $grp      95     prior group assignment    
3 $prior    8      prior group probabilities 
4 $assign   95     posterior group assignment
5 $pca.cent 67     centring vector of PCA    
6 $pca.norm 67     scaling vector of PCA     
7 $pca.eig  56     eigenvalues of PCA        

  data.frame    nrow ncol content                                          
1 $tab          95   7    retained PCs of PCA                              
2 $means        8    7    group means                                      
3 $loadings     7    4    loadings of variables                            
4 $ind.coord    95   4    coordinates of individuals (principal components)
5 $grp.coord    8    4    coordinates of groups                            
6 $posterior    95   8    posterior membership probabilities               
7 $pca.loadings 67   7    PCA loadings of original variables               
8 $var.contr    67   4    contribution of original variables               

> pdf(here::here("figs/DAPC-scatterplot.pdf"), width = 3.464565, height = 3.464565 * (1/1.2), pointsize = 5, colormodel = "cmyk")
> dev.control("enable")
> scatter.dapc(
+   CD_DAPC,
+   pch = 19,
+   cex = 1.0,
+   clabel = 0,
+   cstar = 0,
+   cellipse = 1,
+   legend = TRUE,
+   inset.da = 0,
+   posi.da = "bottomleft",
+   posi.leg = "bottomright",
+   col = my_palette[popNames(CD)])                         
> dev.copy(device = tiff, here::here("figs/DAPC-scatterplot.tiff"), width = 3.464565, height = 3.464565 * (1/1.2), pointsize = 5, units = "in", res = 1200)
quartz_off_screen 
                3 
> dev.off()
pdf 
  2 
> dev.off()
null device 
          1 
> 
> # ANTHONY
> 
> pdf(here::here("figs/DAPC-barplot.pdf"), width = 7.20472, height = 3.464565, pointsize = 5, colormodel = "cmyk")
> dev.control("enable")
> gg <- ggcompoplot(CD_DAPC, CD, cols = 4, pal = my_palette)
> gg$data$population <- factor(gg$data$population, names(my_palette))
> gg$data$oldPopulation <- factor(gg$data$oldPopulation, names(my_palette))
> gg + 
+   theme_bw(base_size = 10, base_family = "Helvetica") +
+   theme(axis.text.x = element_blank()) +
+   theme(axis.ticks.x = element_blank()) +
+   theme(legend.position = "top") 
> dev.copy(device = tiff, here::here("figs/DAPC-barplot.tiff"), width = 7.20472, height = 3.464565, pointsize = 5, units = "in", res = 1200)
quartz_off_screen 
                3 
> dev.off()
pdf 
  2 
> dev.off()
null device 
          1 
> options(encoding = enc)
> getOption("encoding")
[1] "native.enc"
> 
